import { render, screen, fireEvent, waitFor } from '@testing-library/react'
import { describe, it, expect, vi, beforeEach } from 'vitest'
import App from './App'

// Mock Camera component
vi.mock('./components/Camera', () => ({
  Camera: ({ onStream, onCameraChange }: { 
    onStream?: (stream: MediaStream) => void
    onCameraChange?: (facingMode: 'user' | 'environment') => void 
  }) => {
    const mockStream = { id: 'test-stream' } as MediaStream
    
    // video element„Å´stream„ÅåË®≠ÂÆö„Åï„Çå„Çã„Åì„Å®„Çí„Ç∑„Éü„É•„É¨„Éº„Éà
    const handleStreamStart = () => {
      onStream?.(mockStream)
      // DOM„ÅÆvideo element„ÅÆsrcObject„ÇíË®≠ÂÆö
      setTimeout(() => {
        const video = document.querySelector('video') as HTMLVideoElement
        if (video) {
          Object.defineProperty(video, 'srcObject', {
            value: mockStream,
            writable: true
          })
        }
      }, 10)
    }
    
    return (
      <div data-testid="camera-component">
        <button onClick={handleStreamStart} data-testid="mock-start-camera">
          Start Camera
        </button>
        <button 
          onClick={() => onCameraChange?.('environment')} 
          data-testid="mock-switch-camera"
        >
          Switch Camera
        </button>
        <video data-testid="mock-video" />
      </div>
    )
  },
}))

// Mock PoseLandmarkerDetector component
vi.mock('./components/PoseLandmarkerDetector', () => ({
  PoseLandmarkerDetector: ({ videoElement }: { videoElement?: HTMLVideoElement }) => (
    <div data-testid="pose-detector-component">
      {videoElement ? 'Pose detection active' : 'No video element'}
    </div>
  ),
}))

// Mock other components
vi.mock('./components/TrajectoryVisualization', () => ({
  TrajectoryVisualization: () => <div data-testid="trajectory-component">Trajectory Visualization</div>,
}))

vi.mock('./components/GaitClassificationDisplay', () => ({
  GaitClassificationDisplay: () => <div data-testid="classification-component">Gait Classification</div>,
}))

vi.mock('./components/ErrorBoundary', () => ({
  ErrorBoundary: ({ children }: { children: React.ReactNode }) => <div>{children}</div>,
}))

// Mock document.querySelector for video element
const mockVideoElement = { 
  play: vi.fn(), 
  pause: vi.fn(),
  srcObject: null 
} as unknown as HTMLVideoElement

Object.defineProperty(document, 'querySelector', {
  value: vi.fn((selector: string) => {
    if (selector === 'video') return mockVideoElement
    return null
  }),
  writable: true,
})

describe('App - Camera Integration (TDD)', () => {
  beforeEach(() => {
    vi.clearAllMocks()
  })

  // üî¥ RED: Camera permission request test
  it('should render app header and camera section', () => {
    render(<App />)

    expect(screen.getByText('Ê≠©Ë°åÂàÜÊûê„Ç¢„Éó„É™ - Catwalk')).toBeInTheDocument()
    expect(
      screen.getByText('„Ç´„É°„É©„ÅßÊ≠©Ë°å„ÇíÊíÆÂΩ±„Åó„ÄÅ„Ç≠„É£„ÉÉ„Éà„Ç¶„Ç©„Éº„ÇØ„ÅãÈÖîÊ≠©„Åã„ÇíÂà§ÂÆö„Åó„Åæ„Åô')
    ).toBeInTheDocument()
    expect(screen.getByText('„Ç´„É°„É©Êò†ÂÉè')).toBeInTheDocument()
    expect(screen.getByTestId('camera-component')).toBeInTheDocument()
  })

  // üî¥ RED: Camera stream handling test
  it('should show pose detector when camera stream is available', async () => {
    render(<App />)

    // Initially pose detector should not be visible
    expect(screen.queryByTestId('pose-detector-component')).not.toBeInTheDocument()

    // Simulate camera stream start
    const startCameraButton = screen.getByTestId('mock-start-camera')
    fireEvent.click(startCameraButton)

    // Pose detector should appear after stream is available
    await waitFor(() => {
      expect(screen.getByTestId('pose-detector-component')).toBeInTheDocument()
      expect(screen.getByText('ÂßøÂã¢Ê§úÂá∫')).toBeInTheDocument()
    })
  })

  // üî¥ RED: Integration flow test
  it('should handle complete camera to pose detection flow', async () => {
    render(<App />)

    // Step 1: App loads with camera component
    expect(screen.getByTestId('camera-component')).toBeInTheDocument()
    expect(screen.queryByText('ÂßøÂã¢Ê§úÂá∫')).not.toBeInTheDocument()

    // Step 2: User starts camera
    const startCameraButton = screen.getByTestId('mock-start-camera')
    fireEvent.click(startCameraButton)

    // Step 3: Pose detection becomes available
    await waitFor(() => {
      expect(screen.getByText('ÂßøÂã¢Ê§úÂá∫')).toBeInTheDocument()
      expect(screen.getByTestId('pose-detector-component')).toBeInTheDocument()
    })
  })

  // MediaPipeÈÄ£Êê∫ „Ç´„É°„É©Â§âÊõ¥„ÉÜ„Çπ„Éà (TDD RED phase)
  describe('MediaPipe Camera Switch Integration', () => {
    it('should handle camera switch without breaking MediaPipe integration', async () => {
      render(<App />)

      // „Ç´„É°„É©ÈñãÂßã
      const startCameraButton = screen.getByTestId('mock-start-camera')
      fireEvent.click(startCameraButton)

      // MediaPipeÁµ±Âêà„ÅåÊúâÂäπ„Å´„Å™„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
      await waitFor(() => {
        expect(screen.getByTestId('pose-detector-component')).toBeInTheDocument()
      })

      // „Ç´„É°„É©Âàá„ÇäÊõø„Åà
      const switchCameraButton = screen.getByTestId('mock-switch-camera')
      fireEvent.click(switchCameraButton)

      // MediaPipeÁµ±Âêà„ÅåÁ∂ôÁ∂ö„Åï„Çå„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
      // „Åì„ÅÆ„ÉÜ„Çπ„Éà„ÅØÁèæÂú®Â§±Êïó„Åô„ÇãÔºàstreamÂ§âÊõ¥„Éè„É≥„Éâ„É™„É≥„Ç∞„ÅåÊú™ÂÆüË£Ö„ÅÆ„Åü„ÇÅÔºâ
      await waitFor(() => {
        expect(screen.getByTestId('pose-detector-component')).toBeInTheDocument()
        expect(screen.getByText('ÂßøÂã¢Ê§úÂá∫')).toBeInTheDocument()
      })
    })

    it('should properly pass camera stream to MediaPipe components after switch', async () => {
      render(<App />)

      // ÂàùÊúü„Ç´„É°„É©ÈñãÂßã
      fireEvent.click(screen.getByTestId('mock-start-camera'))
      
      await waitFor(() => {
        expect(screen.getByTestId('pose-detector-component')).toBeInTheDocument()
      })

      // „Ç´„É°„É©Âàá„ÇäÊõø„ÅàÂæå„ÇÇvideo element„ÅåÊ≠£„Åó„ÅèÊ∏°„Åï„Çå„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
      fireEvent.click(screen.getByTestId('mock-switch-camera'))
      
      // „Åì„ÅÆ„ÉÜ„Çπ„Éà„ÅØÁèæÂú®Â§±Êïó„Åô„ÇãÂèØËÉΩÊÄß„Åå„ÅÇ„ÇãÔºàApp.tsx „ÅÆ onCameraChange Êú™ÂÆüË£Ö„ÅÆ„Åü„ÇÅÔºâ
      await waitFor(() => {
        const poseDetector = screen.getByTestId('pose-detector-component')
        expect(poseDetector).toBeInTheDocument()
        // MediaPipe„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„ÅåÊñ∞„Åó„ÅÑstream„ÇíÂèó„ÅëÂèñ„Å£„Å¶„ÅÑ„Çã„Åì„Å®„ÇíÈñìÊé•ÁöÑ„Å´Á¢∫Ë™ç
      })
    })
  })

  // Phase 2: handleStream „Å® handleCameraChange „ÅÆÈÄ£Êê∫„ÉÜ„Çπ„Éà (TDD RED)
  describe('Stream and Camera Change Integration', () => {
    it('should update video element through handleStream before handleCameraChange', async () => {
      
      // document.querySelector „ÅÆ„É¢„ÉÉ„ÇØ„ÇíÊõ¥Êñ∞
      const mockVideo = { 
        srcObject: null,
        play: vi.fn(),
        pause: vi.fn() 
      } as unknown as HTMLVideoElement
      
      const querySelectorSpy = vi.fn((selector: string) => {
        if (selector === 'video') return mockVideo
        return null
      })
      Object.defineProperty(document, 'querySelector', {
        value: querySelectorSpy,
        writable: true,
      })

      render(<App />)

      // „Ç´„É°„É©ÈñãÂßãÔºàhandleStream„ÅåÂëº„Å∞„Çå„ÇãÔºâ
      fireEvent.click(screen.getByTestId('mock-start-camera'))
      
      // handleStream„Å´„Çà„Å£„Å¶video element„ÅåË®≠ÂÆö„Åï„Çå„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
      await waitFor(() => {
        expect(querySelectorSpy).toHaveBeenCalledWith('video')
        expect(screen.getByTestId('pose-detector-component')).toBeInTheDocument()
      })

      // „Ç´„É°„É©Âàá„ÇäÊõø„ÅàÔºàhandleCameraChange„ÅåÂëº„Å∞„Çå„ÇãÔºâ
      fireEvent.click(screen.getByTestId('mock-switch-camera'))

      // video element„ÅåÂèñÂæó„Åï„Çå„Çã„Åì„Å®„ÇíÁ¢∫Ë™çÔºàÂõûÊï∞„ÅØÊüîËªü„Å´„ÉÅ„Çß„ÉÉ„ÇØÔºâ
      await waitFor(() => {
        expect(querySelectorSpy).toHaveBeenCalledWith('video')
        expect(screen.getByTestId('pose-detector-component')).toBeInTheDocument()
      })
    })

    it('should handle video element timing issues during camera switch', async () => {
      let videoCallCount = 0
      const mockVideo1 = { 
        srcObject: null,
        id: 'video1' 
      } as unknown as HTMLVideoElement
      const mockVideo2 = { 
        srcObject: { id: 'new-stream' } as unknown as MediaStream,
        id: 'video2' 
      } as unknown as HTMLVideoElement

      // video element„ÅåÊÆµÈöéÁöÑ„Å´Êõ¥Êñ∞„Åï„Çå„Çã„Åì„Å®„Çí„Ç∑„Éü„É•„É¨„Éº„Éà
      const querySelectorSpy = vi.fn((selector: string) => {
        if (selector === 'video') {
          videoCallCount++
          return videoCallCount === 1 ? mockVideo1 : mockVideo2
        }
        return null
      })
      
      Object.defineProperty(document, 'querySelector', {
        value: querySelectorSpy,
        writable: true,
      })

      render(<App />)

      // „Ç´„É°„É©ÈñãÂßã
      fireEvent.click(screen.getByTestId('mock-start-camera'))
      
      await waitFor(() => {
        expect(screen.getByTestId('pose-detector-component')).toBeInTheDocument()
      })

      // „Ç´„É°„É©Âàá„ÇäÊõø„Åà
      fireEvent.click(screen.getByTestId('mock-switch-camera'))

      // „Çø„Ç§„Éü„É≥„Ç∞ÂïèÈ°å„Å∏„ÅÆÂØæÂøú„ÅåÂÆüË£Ö„Åï„Çå„Å¶„ÅÑ„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
      await waitFor(() => {
        expect(querySelectorSpy).toHaveBeenCalled() // ÂõûÊï∞„ÅØÊüîËªü„Å´„ÉÅ„Çß„ÉÉ„ÇØ
        // Êñ∞„Åó„ÅÑstream„ÇíÊåÅ„Å§video element„ÅåÊ≠£„Åó„ÅèÊ∏°„Åï„Çå„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
        expect(screen.getByTestId('pose-detector-component')).toBeInTheDocument()
      }, { timeout: 2000 })
    })

    it('should handle camera change with null stream gracefully', async () => {
      const querySelectorSpy = vi.fn((selector: string) => {
        if (selector === 'video') return null // video element„ÅåË¶ã„Å§„Åã„Çâ„Å™„ÅÑÂ†¥Âêà
        return null
      })
      
      Object.defineProperty(document, 'querySelector', {
        value: querySelectorSpy,
        writable: true,
      })

      render(<App />)

      // „Ç´„É°„É©ÈñãÂßã
      fireEvent.click(screen.getByTestId('mock-start-camera'))
      
      // video element„ÅåË¶ã„Å§„Åã„Çâ„Å™„ÅÑÂ†¥Âêà„ÄÅpose-detector-component„ÅØË°®Á§∫„Åï„Çå„Å™„ÅÑ
      await waitFor(() => {
        expect(querySelectorSpy).toHaveBeenCalled()
      })

      // pose-detector-component„ÅåË°®Á§∫„Åï„Çå„Å™„ÅÑ„Åì„Å®„ÅåÊ≠£Â∏∏„Å™Âãï‰Ωú
      expect(screen.queryByTestId('pose-detector-component')).not.toBeInTheDocument()

      // „Ç´„É°„É©Âàá„ÇäÊõø„Åà
      fireEvent.click(screen.getByTestId('mock-switch-camera'))

      // „Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞„ÅåÂãï‰Ωú„Åó„ÄÅ„Ç¢„Éó„É™„ÅåÂãï‰Ωú„ÅóÁ∂ö„Åë„Çã
      await waitFor(() => {
        expect(querySelectorSpy).toHaveBeenCalled()
      })
    })
  })

  // Device-based camera mode selection tests
  describe('Device-based Camera Mode Selection', () => {
    it('should pass environment facing mode for mobile devices', () => {
      // Mock mobile device detection
      vi.doMock('../utils/deviceDetection', () => ({
        getDefaultCameraFacingMode: vi.fn(() => 'environment'),
        isMobileDevice: vi.fn(() => true)
      }))

      render(<App />)

      // Camera component should receive environment facing mode
      const cameraComponent = screen.getByTestId('camera-component')
      expect(cameraComponent).toBeInTheDocument()

      // The mock camera component should be rendered (indicating proper prop passing)
      expect(screen.getByTestId('mock-video')).toBeInTheDocument()
    })

    it('should pass user facing mode for desktop devices', () => {
      // Mock desktop device detection
      vi.doMock('../utils/deviceDetection', () => ({
        getDefaultCameraFacingMode: vi.fn(() => 'user'),
        isMobileDevice: vi.fn(() => false)
      }))

      render(<App />)

      // Camera component should receive user facing mode
      const cameraComponent = screen.getByTestId('camera-component')
      expect(cameraComponent).toBeInTheDocument()

      // The mock camera component should be rendered (indicating proper prop passing)
      expect(screen.getByTestId('mock-video')).toBeInTheDocument()
    })
  })
})
